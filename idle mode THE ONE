#include <AccelStepper.h>
#include <MultiStepper.h>
#include <Stepper.h>


// Define pin connections
const int limitX = 11;
const int limitY = 10;
const int magnet = 12;



// Creates an instance of motor objects
AccelStepper myStepper0(AccelStepper::FULL4WIRE, 2, 3, 4, 5);
AccelStepper myStepper1(AccelStepper::FULL4WIRE, 6, 7, 8, 9);


//motor global variables
int maxVelocity = 1000;
int velocity = 500;
int acceleration = 100;
int inf = 9999;

//Board global variables
int pos_H8[] = {95, 425};  //corner 1
int pos_A1[] = {1475, 1800};  //corner 2
int board_size = pos_A1[0] - pos_H8[0];
int tile_size = board_size / 7;
int boundary_offset = tile_size / 2;
int taken_pieces_w = 0;
int taken_pieces_b = 0;

//game array
const int game1[] = {
  52, 54,
  57, 55,
  61, 34,
  28, 36,
  41, 85,
  78, 66,
  185, 167
};
const int game1Moves = 7;
int num_captured = 9;

void setup() {

  Serial.begin(9600);

  pinMode(limitX, INPUT);
  pinMode(limitY, INPUT);
  pinMode(magnet, OUTPUT);


  //myStepper0.moveTo(inf);
  myStepper0.setMaxSpeed(maxVelocity);
  myStepper0.setSpeed(velocity);
  myStepper0.setAcceleration(acceleration);

  //myStepper1.moveTo(inf);
  myStepper1.setMaxSpeed(maxVelocity);
  myStepper1.setSpeed(velocity);
  myStepper1.setAcceleration(acceleration);

  calibrate();

}

void loop() {
  delay(100);
  calibrate();

  delay(100);
  playGame(game1, game1Moves);
  //moveMagnet(-250, -250);



}

//------------------------------------------------------------------
void calibrate() {
  //moveMagnet(40, 0);
  //run motors until limitY is reached
  while (digitalRead(limitY) == LOW && digitalRead(limitX) == LOW) {
    //set motors move location
    myStepper0.moveTo(-inf);
    myStepper1.moveTo(-inf);

    //set motors to move upwards up direction
    myStepper0.setSpeed(-velocity);
    myStepper1.setSpeed(-velocity);

    myStepper0.runSpeed();
    myStepper1.runSpeed();
  }

  delay(10);

  //run motors until limitX is reached
  while (digitalRead(limitX) == LOW) {
    //set motors move location
    myStepper0.moveTo(-inf);
    myStepper1.moveTo(inf);

    //set motors to move upwards up direction
    myStepper0.setSpeed(-velocity);
    myStepper1.setSpeed(velocity);

    myStepper0.runSpeed();
    myStepper1.runSpeed();
  }

  //set current position as the zero spot
  myStepper0.setCurrentPosition(0);
  myStepper1.setCurrentPosition(0);
}

//------------------------------------------------------------------
void moveMagnet(int x1, int y1) {
  //set current position as the zero spot
  myStepper0.setCurrentPosition(0);
  myStepper1.setCurrentPosition(0);

  //determine if y direction was up or down (+ = down)
  if (y1 >= 0) {
    //begin with downwards
    myStepper0.moveTo(y1);
    myStepper1.moveTo(y1);

    //set motors to move right direction
    myStepper0.setSpeed(velocity);
    myStepper1.setSpeed(velocity);
  }
  else {
    //up direction
    myStepper0.moveTo(y1);
    myStepper1.moveTo(y1);

    //set motors to move right direction
    myStepper0.setSpeed(-velocity);
    myStepper1.setSpeed(-velocity);
  }

  //complete the movement
  while (myStepper0.distanceToGo() != 0 && myStepper1.distanceToGo() != 0) {
    myStepper0.runSpeed();
    myStepper1.runSpeed();
  }

  //set current position as the zero spot
  myStepper0.setCurrentPosition(0);
  myStepper1.setCurrentPosition(0);

  if (x1 >= 0) {
    //now go left
    myStepper0.moveTo(x1);
    myStepper1.moveTo(-x1);

    //set motors to move left direction
    myStepper0.setSpeed(velocity);
    myStepper1.setSpeed(-velocity);
  }
  else {
    //now go right
    myStepper0.moveTo(x1);
    myStepper1.moveTo(-x1);

    //set motors to move right direction
    myStepper0.setSpeed(-velocity);
    myStepper1.setSpeed(velocity);
  }


  //complete the movement
  while (myStepper0.distanceToGo() != 0 && myStepper1.distanceToGo() != 0) {
    myStepper0.runSpeed();
    myStepper1.runSpeed();
  }
}

//------------------------------------------------------------------
//use two coordinates: 11 for A1, 21 for B1, etc
void pieceMoved(byte loc1, byte loc2) {

  //calculate loc1
  int loc1_1  = 8 - ((loc1 / 10U) % 10);
  int loc1_2 = 8 - ((loc1 / 1U) % 10);
  //calculate loc2
  int loc2_1  = 8 - ((loc2 / 10U) % 10);
  int loc2_2 = 8 - ((loc2 / 1U) % 10);

  //start at position H8
  moveMagnet(pos_H8[0], pos_H8[1]);
  //move to loc1
  moveMagnet(tile_size * loc1_1, tile_size * loc1_2);

  //turn on magnet
  digitalWrite(magnet, HIGH);
  delay(1000);

  //move to loc2
  //offset to bottom left corner
  moveMagnet(-boundary_offset, -boundary_offset);
  //complete x movement
  moveMagnet(tile_size * (loc2_1 - loc1_1), 0);
  //complete y movement
  moveMagnet(0, tile_size * (loc2_2 - loc1_2));
  //undo the offset
  moveMagnet(boundary_offset, boundary_offset);

  //turn off magnet
  digitalWrite(magnet, LOW);
  delay(1000);
}

//------------------------------------------------------------------

void playGame(int game[], int moves) {
  //variable to keep track of number of captured pieces
  num_captured = 9;
  
  for (int i = 0; i < (moves); i = i + 1) {
    calibrate();
    int move1 = game[2 * i];
    int move2 = game[(2 * i) + 1];

    if (move1 >= 100) {
      num_captured = num_captured + 10;
      //first move captured piece away
      pieceMoved(move2 - 100, num_captured);
      calibrate();
      pieceMoved(move1 - 100, move2 - 100);
      
    }
    else {
      pieceMoved(move1, move2);
    }


  }
  //game over!!
  delay(5000);
  //rebuild board after game is over
  reverseGame(game, moves);
}

void reverseGame(int game[], int moves){
  for (int i = moves - 1; i >= 0; i = i - 1) {
    calibrate();
    int move1 = game[2 * i];
    int move2 = game[(2 * i) + 1];

    if (move1 >= 100) {
      //first move captured piece away
      pieceMoved(move2 - 100, move1 - 100);
      calibrate();
      pieceMoved(num_captured, move2 - 100);
      num_captured = num_captured - 10;      
    }
    else {
      pieceMoved(move2, move1);
    }
  }
}
